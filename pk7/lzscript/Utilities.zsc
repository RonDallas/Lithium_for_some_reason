// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │    By Alison G. Watson & InsanityBringer. Attribution is encouraged,     │
// │                           though not required.                           │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

/* UTIL: Utilities and Tools Intersperse Languages */
struct Lith_UTIL {
   static double constDeg(double x) {
      x %= 360;
      if(x < 0) x += 360;
      return x;
   }

   static double invertDeg(double x) {
      x += 180;
      x %= 360;
      if(x < 0) x += 360;
      return x;
   }

   static double diffDeg(double a, double b) {
      double d = (b - a) % 360;
      if(d < 0) d += 360;
      return d;
   }

   static double sDiffDeg(double a, double b) {
      double d = b - a;
      if(d ~== 0) return 0;
      d %= 360;
      return 2 * d % 360 - d;
   }

   static double easeInOutQuad(double t) {
      if(t < 0.5) {
         return 2.0 * t * t;
      } else {
         double tt = -2.0 * t + 2.0;
         return 1.0 - tt * tt / 2.0;
      }
   }

   static double easeOutCubic(double t) {
      t = 1 - t;
      return 1 - t * t * t;
   }

   static double lerp(double a, double b, double t) {
      return (1.0 - t) * a + t * b;
   }

   static vector2 vec2Lerp(vector2 a, vector2 b, double t) {
      return (1.0 - t) * a + t * b;
   }

   static vector3 vec3Lerp(vector3 a, vector3 b, double t) {
      return (1.0 - t) * a + t * b;
   }

   static double angleLerp(double a, double b, double t) {
      return a + sDiffDeg(a, b) * t;
   }

   static color colorLerp(color a, color b, double t) {
      uint rd = uint(lerp(a.r, b.r, t));
      uint gr = uint(lerp(a.g, b.g, t));
      uint bl = uint(lerp(a.b, b.b, t));
      uint al = uint(lerp(a.a, b.a, t));
      return (al << 24) | (rd << 16) | (gr << 8) | bl;
   }

   static int round(double n) {
      return int(n * 1000) % 1000 < 500 ? int(n) : int(n+0.5);
   }

   static vector3 traceFrom(Actor mo, double yaw, double pitch, double dist, double offsetz, bool floor = false, ETraceFlags flags = 0) {
      return Lith_URANUS.instance().traceFromActor(mo, yaw, pitch, dist, offsetZ, floor, flags);
   }

   static vector3 traceFromPos(Sector sec, vector3 pos, double yaw, double pitch, double dist, Actor ignore = null, bool floor = false, ETraceFlags flags = 0) {
      return Lith_URANUS.instance().traceFromPos(sec, pos, yaw, pitch, dist, ignore, floor, flags);
   }

   static play int exec(Actor mo, int scr, int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0) {
      return Level.ExecuteSpecial(84, mo, null, false, scr, arg0, arg1, arg2, arg3);
   }

   static int pData(int info, int permutation = 0) {
      return acs_executeWithResult(lsc_pdata, info, permutation);
   }

   static play bool stateTick(Actor mo) {
      if(mo.tics >= 0 && --mo.tics <= 0) {
         mo.setState(mo.curState.nextState);
         return true;
      } else {
         return false;
      }
   }

   static bool classExists(string cnam) {
      class<Object> cls = cnam;
      return cls != null;
   }

   static float, float circleSpread(float mdy, float mdp) {
      float dy = fRandom(mdy, 0);
      float dp = fRandom(mdp, 0);
      float a  = fRandom(0, 360);
      return sin(a) * dy, cos(a) * dp;
   }

   static vector3 anglesToVec(vector2 a) {
      let cp = cos(-a.y);
      return (cos(a.x)*cp, sin(a.x)*cp, sin(-a.y));
   }

   static vector2 vecToAngles(vector3 v) {
      return (atan2(v.x, v.y), invertDeg(asin(v.z)));
   }

   static void particlePosVel(FSpawnParticleParams pp, vector3 pos, vector2 angles = (0, 0), double distance = 0.0, vector3 vel = (0,0,0), vector2 vel_angles = (0, 0)) {
      if(distance != 0) {
         let mp = Lith_UTIL.anglesToVec(angles);
         pp.pos = pos + mp * distance;
      } else {
         pp.pos = pos;
      }
      if(vel.sum() != 0) {
         let mv = Lith_UTIL.anglesToVec(vel_angles);
         pp.vel = (mv.x * vel.x, mv.y * vel.y, mv.z * vel.z);
      } else {
         pp.vel.x = pp.vel.y = pp.vel.z = 0;
      }
   }

   play static void copyPSpriteVisualData(PSprite new, PSprite old) {
      new.sprite = old.sprite;
      new.frame = old.frame;
      new.x = old.x;
      new.y = old.y;
      new.oldx = old.oldx;
      new.oldy = old.oldy;
      new.baseScale = old.baseScale;
      new.pivot = old.pivot;
      new.scale = old.scale;
      new.rotation = old.rotation;
      new.halign = old.halign;
      new.valign = old.valign;
      new.coord0 = old.coord0;
      new.coord1 = old.coord1;
      new.coord2 = old.coord2;
      new.coord3 = old.coord3;
      new.alpha = old.alpha;
      new.firstTic = old.firstTic;
      new.interpolateTic = old.interpolateTic;
      new.translation = old.translation;
      new.bAddWeapon = old.bAddWeapon;
      new.bAddBob = old.bAddBob;
      new.bFlip = old.bFlip;
      new.bMirror = old.bMirror;
      new.bPlayerTranslated = old.bPlayerTranslated;
      new.bPivotPercent = old.bPivotPercent;
      new.bInterpolate = old.bInterpolate;
   }
}

class Lith_LineTracer : LineTracer {
   Actor m_ignore;
   override ETraceStatus traceCallback() {
      let mo = results.hitActor;
      let ln = results.hitLine;
      bool tomare;
      switch(results.hitType) {
      case TRACE_HITACTOR:
         tomare = mo != m_ignore && mo.bShootable && mo.bSolid;
         break;
      case TRACE_HITWALL:
         tomare =
            ln.flags & (Line.ML_BLOCKEVERYTHING |
                        Line.ML_BLOCKHITSCAN |
                        Line.ML_BLOCKING |
                        Line.ML_BLOCKPROJECTILE |
                        Line.ML_BLOCK_PLAYERS) ||
            results.tier != TIER_MIDDLE;
         break;
      default:
         /* get hit, bitch */
         tomare = true;
         break;
      }
      return tomare ? TRACE_STOP : TRACE_SKIP;
   }
}

class Lith_FnBool abstract {
   virtual bool run() {return false;}
}

class Lith_FnBoolFuse : Lith_FnBool {
   bool        m_result;
   Lith_FnBool m_fInner;
   static Lith_FnBoolFuse create(class<Lith_FnBoolFuse> ty, Lith_FnBool fInner) {
      let f = Lith_FnBoolFuse(new(ty));
      f.m_fInner = fInner;
      return f;
   }
   override bool run() {
      if(!m_result) {
         m_result = m_fInner.run();
      }
      return m_result;
   }
}

class Lith_FnSector : Lith_FnBool abstract {
   static Lith_FnSector init(class<Lith_FnSector> ty) {
      let f = Lith_FnSector(new(ty));
      return f;
   }
   virtual bool call(Sector sec) {return false;}
   override bool run() {
      foreach(sec : level.sectors) {
         if(call(sec)) {
            return true;
         }
      }
      return false;
   }
}

class Lith_VecLerp {
   vector2 lst, nex;
   double  ds, tm;
   static Lith_VecLerp create(class<Lith_VecLerp> lt = 'Lith_VecLerp') {
      let l = Lith_VecLerp(new(lt));
      l.lst = (0, 0);
      l.nex = (0, 0);
      l.ds = 1;
      l.tm = 0;
      return l;
   }
   vector2 update(vector2 new, double ct) {
      let cur = get_cur(ct);
      if(new == nex) {
         return cur;
      } else {
         let del = cur - new;
         lst = cur;
         nex = new;
         ds  = get_ds(del);
         tm  = ct + ds;
         return lst;
      }
   }
   double get_ds(vector2 del) const {
      return sqrt(del.x * del.x + del.y * del.y) * 20.0;
   }
   vector2 get_cur(double ct) const {
      return ct < tm ? Lith_UTIL.vec2Lerp(lst, nex, Lith_UTIL.easeOutCubic(1 - clamp((tm - ct) / ds, 0, 1))) : nex;
   }
}

/* EOF */
