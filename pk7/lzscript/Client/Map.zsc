extend class Lith_URANUS;

array<double> m_mapDrawnPoints;
array<int> m_mapColorIndices;
array<color> m_mapColors;
vector2 m_mapCenter, m_mapTopLeft, m_mapBottomRight, m_mapSizeHalf;
vector2 m_mapOnScreenSize;
color m_mapColor;
bool m_mapEnabled;
int m_mapPortalGroup;
textureId m_mapBorderTl, m_mapBorderT, m_mapBorderTr,
          m_mapBorderL,                m_mapBorderR,
          m_mapBorderBl, m_mapBorderB, m_mapBorderBr;
int m_mapBorder;

bool, vector2, vector2 collideLineAabb(vector2 p, vector2 dt, vector2 center, vector2 s2) {
   // get intersection time with box's edges
   let s   = (1.0 / dt.x, 1.0 / dt.y);
   let sgn = (s.x < 0 ? -1 : 1, s.y < 0 ? -1 : 1);
   let near = ((center.x - sgn.x * s2.x - p.x) * s.x,
               (center.y - sgn.y * s2.y - p.y) * s.y);
   let far  = ((center.x + sgn.x * s2.x - p.x) * s.x,
               (center.y + sgn.y * s2.y - p.y) * s.y);
   // check closest time of collision on both axes
   if(near.x <= far.y && near.y <= far.x) {
      // check nearest and furthest time
      let nt = max(near.x, near.y);
      let ft = min(far.x, far.y);
      if(nt < 1 && ft > 0) {
         // within box, calculate hit segment
         let ht = clamp(nt, 0, 1); // depth
         let hd = ((1 - ht) * -dt.x, (1 - ht) * -dt.y); // delta
         let hp = (p.x + dt.x * ht, p.y + dt.y * ht); // pos
         return true, hd, hp;
      }
   }
   return false, (0,0), (0,0);
}

void traverseLineSectors(Line ln, vector3 m1, vector3 m2, vector3 m3) {
   // traverse front sector if necessary
   if(ln.frontSector && ln.frontSector.validCount != validCount) {
      mapTraverseSector(ln.frontSector, m1, m2, m3);
   }
   // traverse back sector if necessary
   if(ln.backSector && ln.backSector.validCount != validCount) {
      mapTraverseSector(ln.backSector, m1, m2, m3);
   }
}

void mapTraverseSector(Sector sec, vector3 m1, vector3 m2, vector3 m3) {
   // set sector's validCount to prevent infinite recursion
   sec.validCount = validCount;
   bool isCurPortal = m_mapPortalGroup == sec.portalGroup;
   foreach(ln : sec.lines) {
      // set line's validCount to prevent unnecessary draws
      if(ln.validCount == validCount) continue;
      ln.validCount = validCount;
      if(ln.isVisualPortal()) {
         // has a portal, need to move it into place
         let disp = ln.getPortalDisplacement();
         let angl = ln.getPortalAngleDiff();
         let dest = ln.getPortalDestination();
         let n1 = m1, n2 = m2, n3 = m3;
         // translate if necessary
         if(disp.x || disp.y) {
            let [t1, t2, t3] = Lith_UTIL.mat3x3TranslateVec2(-disp);
            [n1, n2, n3] = Lith_UTIL.mat3x3Multiply(n1, n2, n3, t1, t2, t3);
         }
         // rotate if necessary
         if(angl) {
            let [r1, r2, r3] = Lith_UTIL.mat3x3Rotate(angl);
            [n1, n2, n3] = Lith_UTIL.mat3x3Multiply(n1, n2, n3, r1, r2, r3);
         }
         // traverse destination line's sectors with new matrix
         traverseLineSectors(dest, n1, n2, n3);
      } else {
         // no portal, just traverse this line's sectors
         traverseLineSectors(ln, m1, m2, m3);
      }
      // don't bother trying to draw unmapped lines
      if(!(am_cheat != 0 || ln.flags & Line.ML_MAPPED) ||
         ln.flags & Line.ML_DONTDRAW)
      {
         continue;
      }
      // store bbox positions so they can be mutated
      let lnTl = (ln.bbox[2], ln.bbox[0]);
      let lnBr = (ln.bbox[3], ln.bbox[1]);
      // store line points and delta so we can mutate them
      let v1 = ln.v1.p;
      let v2 = ln.v2.p;
      let dt = ln.delta;
      // if not identity matrix, transform vertices
      if(m1.x != 1 || m1.y != 0 || m1.z != 0 ||
         m2.x != 0 || m2.y != 1 || m2.z != 0 ||
         m3.x != 0 || m3.y != 0 || m3.z != 1)
      {
         // recalculate vertices and delta
         v1 = Lith_UTIL.mat3x3MultiplyVec2(m1, m2, m3, v1);
         v2 = Lith_UTIL.mat3x3MultiplyVec2(m1, m2, m3, v2);
         dt = v2 - v1;
         // recalculate bbox
         if(v1.x < v2.x) {lnTl.x = v1.x; lnBr.x = v2.x;}
         else            {lnTl.x = v2.x; lnBr.x = v1.x;}
         if(v1.y < v2.y) {lnTl.y = v2.y; lnBr.y = v1.y;}
         else            {lnTl.y = v1.y; lnBr.y = v2.y;}
      }
      // wide pass: check line bbox collides with map bbox
      if(lnTl.x < m_mapBottomRight.x &&
         lnBr.x > m_mapTopLeft.x &&
         lnTl.y > m_mapTopLeft.y &&
         lnBr.y < m_mapBottomRight.y)
      {
         // check both points' collision separately so they can be
         // used to optimize the narrow pass
         let v1coll =
            v1.x < m_mapBottomRight.x && v1.x > m_mapTopLeft.x &&
            v1.y < m_mapBottomRight.y && v1.y > m_mapTopLeft.y;
         let v2coll =
            v2.x < m_mapBottomRight.x && v2.x > m_mapTopLeft.x &&
            v2.y < m_mapBottomRight.y && v2.y > m_mapTopLeft.y;
         // store index for coloration
         let idx = m_mapDrawnPoints.size();
         if(v1coll && v2coll) {
            // slightly narrower pass: if line is entirely within map, draw it
            m_mapDrawnPoints.push(v1.x);
            m_mapDrawnPoints.push(v1.y);
            m_mapDrawnPoints.push(v2.x);
            m_mapDrawnPoints.push(v2.y);
         } else {
            // narrow pass: check segment/aabb collision
            bool hit; vector2 hd, hp;
            if(v1coll) {
               // when v1 is inside map, trace from v2
               [hit, hd, hp] =
                  collideLineAabb(v2, -dt, m_mapCenter, m_mapSizeHalf);
               // if it doesn't hit the map, don't even bother
               if(!hit) continue;
            } else if(v2coll) {
               // when v2 is inside map, trace from v1
               [hit, hd, hp] =
                  collideLineAabb(v1, dt, m_mapCenter, m_mapSizeHalf);
               if(!hit) continue;
            } else {
               // if neither is within the map, make up a line segment
               // by tracing both angles
               [hit, hd, hp] =
                  collideLineAabb(v1, dt, m_mapCenter, m_mapSizeHalf);
               let hp1 = hp;
               if(!hit) continue;
               [hit, hd, hp] =
                  collideLineAabb(v2, -dt, m_mapCenter, m_mapSizeHalf);
               if(!hit) continue;
               hd = hp - hp1;
            }
            // draw collided portion
            let end = hp - hd;
            m_mapDrawnPoints.push(hp.x);
            m_mapDrawnPoints.push(hp.y);
            m_mapDrawnPoints.push(end.x);
            m_mapDrawnPoints.push(end.y);
         }
         let cr = m_mapColor;
         // draw other portal groups as translucent
         if(!isCurPortal) {
            cr = color(cr.a / 2, cr.r, cr.g, cr.b);
         }
         // draw two sided lines as extra translucent
         if(ln.flags & Line.ML_TWOSIDED) {
            cr = color(cr.a / 3, cr.r, cr.g, cr.b);
         }
         // store color and index if needed
         if(cr != m_mapColor) {
            m_mapColorIndices.push(idx);
            m_mapColors.push(cr);
         }
      }
   }
}

void tickMap() {
   // clear all draw data
   m_mapDrawnPoints.clear();
   m_mapColorIndices.clear();
   m_mapColors.clear();
   m_mapEnabled = false;
   // exit if minimap won't be drawn
   if(!players[consolePlayer].mo ||
      !Lith_UTIL.pData(_pdt_upgrade, UPGR_Minimap))
   {
      return;
   }
   m_mapEnabled = true;
   // get map border textures if needed
   if(!m_mapBorderTl.isValid()) {
      m_mapBorder = -1;
   }
   if(m_mapBorder != lith_hud_mapborder) {
      m_mapBorder = lith_hud_mapborder;
      m_mapBorderTl = getTex(":Map:Border:" .. m_mapBorder .. "Tl");
      m_mapBorderT  = getTex(":Map:Border:" .. m_mapBorder .. "T");
      m_mapBorderTr = getTex(":Map:Border:" .. m_mapBorder .. "Tr");
      m_mapBorderL  = getTex(":Map:Border:" .. m_mapBorder .. "L");
      m_mapBorderR  = getTex(":Map:Border:" .. m_mapBorder .. "R");
      m_mapBorderBl = getTex(":Map:Border:" .. m_mapBorder .. "Bl");
      m_mapBorderB  = getTex(":Map:Border:" .. m_mapBorder .. "B");
      m_mapBorderBr = getTex(":Map:Border:" .. m_mapBorder .. "Br");
   }
   // get map color based on hud type
   int hudtype = Lith_UTIL.pData(_pdt_hudtype);
   m_mapColor =
      lith_hud_mapcolor ?
      color(255,
            lith_hud_mapcolor_r, lith_hud_mapcolor_g, lith_hud_mapcolor_b) :
      (hudtype != _hud_old ?
       color(Lith_UTIL.pData(_pdt_playercolor, hudtype)) :
       color(255, 255, 0, 0));
   // get map position and size
   let p = players[consolePlayer].mo;
   let scale = (ceil(lith_hud_mapscalex * 100) / 100,
                ceil(lith_hud_mapscaley * 100) / 100);
   let zoom  = 512 / max(ceil(lith_hud_mapzoom * 100) / 100, 0.1);
   m_mapCenter = p.pos.xy;
   m_mapSizeHalf = (zoom * scale.x, zoom);
   m_mapTopLeft     = m_mapCenter - m_mapSizeHalf;
   m_mapBottomRight = m_mapCenter + m_mapSizeHalf;
   m_mapOnScreenSize.y = 64.0 * scale.y;
   m_mapOnScreenSize.x = m_mapOnScreenSize.y * scale.x;
   // prepare sector traversal
   m_mapPortalGroup = p.curSector.portalGroup;
   ++validCount;
   // traverse from player's current sector with identity matrix
   mapTraverseSector(p.curSector, (1, 0, 0), (0, 1, 0), (0, 0, 1));
}

ui void drawMap(RenderEvent evt) {
   if(!m_mapEnabled) {
      return;
   }
   // get properties of map for drawing
   let tl = m_mapTopLeft;
   let s  = m_mapSizeHalf * 2;
   let os = m_mapOnScreenSize;
   let p  = (3 + ceil(lith_hud_mapposx * 3200) / 10,
             3 + ceil(lith_hud_mapposy * 2400) / 10);
   let thickness = lith_hud_mapthickness;
   let alpha     = lith_hud_mapalpha;
   let bgalpha   = lith_hud_mapbgalpha;
   // draw background
   if(bgalpha > 0) {
      drawRect(p.x, p.y, os.x, os.y,
               color(int(0xFF * alpha * bgalpha), m_mapColor.r / 2, m_mapColor.g / 2, m_mapColor.b / 2),
               (320, 240));
   }
   // draw player box
   drawRect(p.x+os.x/2-2, p.y+os.y/2-2, 4, 4,
            color(int(0xFF * alpha), int(m_mapColor.r / 1.5), int(m_mapColor.g / 1.5), int(m_mapColor.b / 1.5)),
            (320, 240));
   // if there are colored lines, initialize next color index
   let nextColor = m_mapColorIndices.size() ? m_mapColorIndices[0] : -1;
   for(int i = 0, j = 0,
           n = m_mapDrawnPoints.size(), m = m_mapColorIndices.size();
       i < n;
       i += 4)
   {
      // check for line color using current index
      let cr = m_mapColor;
      if(i == nextColor) {
         // set color and swap to next color index
         cr = m_mapColors[j];
         nextColor = ++j < m ? m_mapColorIndices[j] : -1;
      }
      if(alpha < 1) {
         cr = color(int(cr.a * alpha), cr.r, cr.g, cr.b);
      }
      // get point elements and transform them to screen positions
      let v1 = (       (m_mapDrawnPoints[i]     - tl.x) / s.x * os.x,
                os.y - (m_mapDrawnPoints[i + 1] - tl.y) / s.y * os.y);
      let v2 = (       (m_mapDrawnPoints[i + 2] - tl.x) / s.x * os.x,
                os.y - (m_mapDrawnPoints[i + 3] - tl.y) / s.y * os.y);
      // draw line
      drawLn(p.x+v1.x, p.y+v1.y, p.x+v2.x, p.y+v2.y, cr, (320, 240),
             size: thickness);
   }
   // draw border
   let bc = m_mapColor;
   if(lith_hud_mapbcolor) {
      bc = color(255,
                 lith_hud_mapbcolor_r,
                 lith_hud_mapbcolor_g,
                 lith_hud_mapbcolor_b);
   }
   let clip = anyPos(p+os, (320, 240), 0);
   let cx = int(clip.x);
   let cy = int(clip.y);
   for(int x = 0; x < os.x; x += 3) {
      Screen.drawTexture(m_mapBorderT, false, p.x+x, p.y-3,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                         DTA_LegacyRenderStyle,STYLE_Stencil,
                         DTA_FillColor,color(255,0,0,0),
                         DTA_ClipRight,cx);
      Screen.drawTexture(m_mapBorderB, false, p.x+x, p.y+os.y,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                         DTA_LegacyRenderStyle,STYLE_Stencil,
                         DTA_FillColor,color(255,0,0,0),
                         DTA_ClipRight,cx);
      Screen.drawTexture(m_mapBorderT, false, p.x+x, p.y-3,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                         DTA_LegacyRenderStyle,STYLE_Shaded,
                         DTA_FillColor,bc,
                         DTA_ClipRight,cx);
      Screen.drawTexture(m_mapBorderB, false, p.x+x, p.y+os.y,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                         DTA_LegacyRenderStyle,STYLE_Shaded,
                         DTA_FillColor,bc,
                         DTA_ClipRight,cx);
   }
   for(int y = 0; y < os.y; y += 3) {
      Screen.drawTexture(m_mapBorderL, false, p.x-3, p.y+y,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                         DTA_LegacyRenderStyle,STYLE_Stencil,
                         DTA_FillColor,color(255,0,0,0),
                         DTA_ClipBottom,cy);
      Screen.drawTexture(m_mapBorderR, false, p.x+os.x, p.y+y,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                         DTA_LegacyRenderStyle,STYLE_Stencil,
                         DTA_FillColor,color(255,0,0,0),
                         DTA_ClipBottom,cy);
      Screen.drawTexture(m_mapBorderL, false, p.x-3, p.y+y,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                         DTA_LegacyRenderStyle,STYLE_Shaded,
                         DTA_FillColor,bc,
                         DTA_ClipBottom,cy);
      Screen.drawTexture(m_mapBorderR, false, p.x+os.x, p.y+y,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                         DTA_LegacyRenderStyle,STYLE_Shaded,
                         DTA_FillColor,bc,
                         DTA_ClipBottom,cy);
   }
   Screen.drawTexture(m_mapBorderTl, false, p.x-3, p.y-3,
                      DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                      DTA_LegacyRenderStyle,STYLE_Stencil,
                      DTA_FillColor,color(255,0,0,0));
   Screen.drawTexture(m_mapBorderTr, false, p.x+os.x, p.y-3,
                      DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                      DTA_LegacyRenderStyle,STYLE_Stencil,
                      DTA_FillColor,color(255,0,0,0));
   Screen.drawTexture(m_mapBorderBl, false, p.x-3, p.y+os.y-1,
                      DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                      DTA_LegacyRenderStyle,STYLE_Stencil,
                      DTA_FillColor,color(255,0,0,0));
   Screen.drawTexture(m_mapBorderBr, false, p.x+os.x, p.y+os.y-1,
                      DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                      DTA_LegacyRenderStyle,STYLE_Stencil,
                      DTA_FillColor,color(255,0,0,0));
   Screen.drawTexture(m_mapBorderTl, false, p.x-3, p.y-3,
                      DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                      DTA_LegacyRenderStyle,STYLE_Shaded,
                      DTA_FillColor,bc);
   Screen.drawTexture(m_mapBorderTr, false, p.x+os.x, p.y-3,
                      DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                      DTA_LegacyRenderStyle,STYLE_Shaded,
                      DTA_FillColor,bc);
   Screen.drawTexture(m_mapBorderBl, false, p.x-3, p.y+os.y-1,
                      DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                      DTA_LegacyRenderStyle,STYLE_Shaded,
                      DTA_FillColor,bc);
   Screen.drawTexture(m_mapBorderBr, false, p.x+os.x, p.y+os.y-1,
                      DTA_VirtualWidth,320, DTA_VirtualHeight,240,
                      DTA_LegacyRenderStyle,STYLE_Shaded,
                      DTA_FillColor,bc);
}
