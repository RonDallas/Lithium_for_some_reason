// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Alison G. Watson. Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

extend class Lith_URANUS;

Lith_LineTracer m_tracer;

enum ShowFlags {
   SHOWF_AMMO     = 1 << 0,
   SHOWF_DAMAGE   = 1 << 1,
   SHOWF_INTERACT = 1 << 2,
   SHOWF_ITEMS    = 1 << 3,
}

int m_showFlags;
int m_itemColor;

ui textureId m_texBatteryOutline;
ui textureId m_texBattery;

int m_lightCurBattery, m_lightMaxBattery;

void renRegister() {
   m_english = Lith_HERMES.localize("LITH_CHECK") == "Eng";

   switch(lith_gui_jpfont) {
   default:
   case font_misaki_gothic: m_uFntSml = 'MisakiG';  break;
   case font_misaki_mincho: m_uFntSml = 'MisakiM';  break;
   case font_jiskan16:      m_uFntSml = 'jiskan16'; break;
   }

   m_lSmlFont       = 'lsmlfont';
   m_lMidFont       = 'lmidfont';
   m_lTrmFont       = 'ltrmfont';
   m_lBigFont       = 'lbigfont';
   m_lJTrmFont      = 'ljtrmfont';
   m_newConsoleFont = 'newconsolefont';

   projectRegister();
   m_tracer = new("Lith_LineTracer");
}

void renUnload() {
   m_dPtr = 0;
   m_tPtr = 0;
   m_dmgNumInit = false;
   m_skyMode = _msky_nochange;
}

void renTick() {
   projectSetRenderer();
   tickSettings();
   tickDmgNums();
   tickScrNums();
   tickCrosshair();
   tickDraw();
   tickSky();
}

ui void renRender(RenderEvent evt) {
   drawSky(evt);

   projectSetUp(evt);

   if(evt.camera && !automapActive) {
      bool hud_enabled = false;
      if(evt.camera.player) {
         hud_enabled = Lith_UTIL.pData(_pdt_hudenabled);
      }

      if(hud_enabled) {
         drawNearByStuff(evt);
         drawDmgNums(evt);
         drawCrosshair(evt);
         drawInventory(evt);
      }

      drawAllData(evt);

      let p = Lith_Player(evt.camera);
      if(p && p.m_cs) p.m_cs.lith_render();

      if(hud_enabled) {
         drawScrNums(evt);
      }
   }
}

static clearscope void StartSound(Actor mo, sound snd, int slot, int flags, double volume = 1.0, double attenuation = 1.0, double pitch = 1.0) {
   if(slot == lch_ambient) {
      S_StartSound(snd, lch_auto, flags, volume, attenuation, pitch);
   } else if(mo) {
      mo.A_StartSound(snd, slot, flags, volume, attenuation, pitch);
   }
}

void tickSettings() {
   m_showFlags =
      (lith_hud_showammo     ? SHOWF_AMMO     : 0) |
      (lith_hud_showdamage   ? SHOWF_DAMAGE   : 0) |
      (lith_hud_showinteract ? SHOWF_INTERACT : 0) |
      (lith_hud_showitems    ? SHOWF_ITEMS    : 0);
   m_itemColor = acs_executeWithResult(lsc_drawcr, lith_hud_itemcolor);
   m_lightMaxBattery = lith_light_battery * 35;
   m_lightCurBattery = Lith_UTIL.pData(_pdt_lightbattery);
}

ui void drawNearByStuff(RenderEvent evt) {
   if(!(m_showFlags & (SHOWF_ITEMS | SHOWF_INTERACT))) {
      return;
   }
   Font fnt = fntSml();
   for(let it = BlockThingsIterator.create(evt.camera, 256.0); it.next();) {
      let mo = it.thing;
      if(mo && mo.getTag("\xFF") != "\xFF" &&
         ((m_showFlags & SHOWF_ITEMS)    && Inventory(mo) && mo.bSpecial ||
          (m_showFlags & SHOWF_INTERACT) && mo.bUseSpecial))
      {
         let [px, py, seen] = project(mo.pos);
         if(seen) {
            string tag   = mo.getTag();
            float  dist  = mo.distance3D(evt.camera);
            float  alpha = 1.0 - clamp(dist / 256.0, 0.0, 1.0);
            int    sw    = fnt.stringWidth(tag);
            int    cr    = m_itemColor;
            Screen.drawText(fnt, cr, px - sw / 2, py, tag, DTA_Alpha,alpha,
                            DTA_VirtualWidth,320, DTA_VirtualHeight,240);
         }
      }
   }
}

ui void drawInventory(RenderEvent evt) {
   static const string keyClasses[] = {
      "BlueCard", "RedCard", "YellowCard",
      "BlueSkull", "RedSkull", "YellowSkull",
      "ChexBlueCard", "ChexRedCard", "ChexYellowCard",
      "KeyBlue", "KeyGreen", "KeyYellow"
   };
   static const string keyText[] = {
      "\cn", "\ca", "\cf",
      "\cn", "\ca", "\cf",
      "\cn", "\ca", "\cf",
      "\cn", "\cd", "\cf"
   };
   int hudlpos = Lith_UTIL.pData(_pdt_hudlpos);
   if(m_texBatteryOutline.isNull()) {
      m_texBatteryOutline = getTex(":HUD:BatteryOutline");
   }
   if(m_texBattery.isNull()) {
      m_texBattery = getTex(":HUD:Battery");
   }
   let mo = evt.camera;
   string inv_text = "";
   int y = 0;
   if(m_showFlags & SHOWF_AMMO) {
      let [blt, cblt] = ammoAmt(mo, 'Lith_BulletAmmo');
      let [shl, cshl] = ammoAmt(mo, 'Lith_ShellAmmo');
      let [rkt, crkt] = ammoAmt(mo, 'Lith_RocketAmmo');
      let [nrg, cnrg] = ammoAmt(mo, 'Lith_PlasmaAmmo');
      let [drk, cdrk] = ammoAmt(mo, 'Lith_CannonAmmo');
      inv_text.appendFormat(
         " \c%c%i\c-\n \c%c%i\c-\n \c%c%i\c-\n \c%c%i\c-\n \c%c%i\c-\n",
         cblt, blt,
         cshl, shl,
         crkt, rkt,
         cnrg, nrg,
         cdrk, drk);
      y += 5 * 8;
   }
   bool any_key = false;
   for(int i = 0; i < keyClasses.size(); ++i) {
      class<Key> kt = keyClasses[i];
      if(kt && mo.countInv(kt)) {
         inv_text = inv_text .. keyText[i];
         any_key  = true;
      }
   }
   if(any_key) {
      y += 8;
      inv_text = inv_text .. "\n";
   }
   Screen.drawText(fntSml(), Font.CR_WHITE, hudlpos, 0, inv_text,
                   DTA_VirtualWidth,320, DTA_VirtualHeight,240);
   y = drawStatFx(evt, y);
   if(m_lightMaxBattery > 0 && m_lightCurBattery < m_lightMaxBattery) {
      float s = m_lightCurBattery / float(m_lightMaxBattery) * 8.0f;
      Screen.drawTexture(m_texBatteryOutline, false, hudlpos, y,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240);
      y += 2;
      Screen.drawTexture(m_texBattery, false, hudlpos+2, y, DTA_VirtualWidth,320, DTA_VirtualHeight,240, DTA_SrcHeight,s, DTA_DestHeightF,s);
      y += 10;
   }
}

clearScope int, int ammoAmt(Actor mo, class<Lith_Ammo> ty) const {
   let inv = mo.findInventory(ty);
   int amt = inv.amount;
   int max = inv.maxAmount;
   int clr;
   if(amt == max) {
      clr = CH_L_N;
   } else if(amt > max - max / 4) {
      clr = CH_L_D;
   } else if(amt > max / 2) {
      clr = CH_L_F;
   } else if(amt > max / 4) {
      clr = CH_L_I;
   } else if(amt != 0) {
      clr = CH_L_G;
   } else {
      clr = CH_L_M;
   }
   return amt, clr;
}

clearScope TraceResults traceFromPos(Sector sec, vector3 pos, double yaw, double pitch, double dist, Actor ignore, bool floor, ETraceFlags flags) {
   let dir = Lith_UTIL.anglesToVec((yaw, pitch), 1);
   m_tracer.m_ignore = ignore;
   m_tracer.trace(pos, sec, dir, dist, flags);
   return m_tracer.results;
}

clearScope TraceResults traceFromActor(Actor mo, double yaw, double pitch, double dist, double offsetZ, bool floor, ETraceFlags flags) {
   return traceFromPos(mo.curSector, mo.pos.plusZ(offsetZ), yaw, pitch, dist, mo, floor, flags);
}

/* EOF */
