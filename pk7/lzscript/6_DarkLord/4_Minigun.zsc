// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Alison G. Watson. Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_Minigun : Lith_DWeapon;

default {
   Lith_Weapon.SpawnType "Lith_ChaingunPickup";
   Lith_Weapon.AmmoType "Lith_BulletAmmo";
   Tag "$LITH_INFO_SHORT_Minigun";
   Weapon.UpSound "weapons/minigun/draw";
   Weapon.SlotNumber 4;
   Weapon.SlotPriority 1;
   Inventory.AltHudIcon "MNGGZ0";
}

double     m_windUp;
statelabel m_lastState;
bool       m_sndState, m_click;
int        m_ammoState;

override void markPrecacheSounds() {
   super.markPrecacheSounds();
   markSound("weapons/minigun/fire");
   markSound("weapons/minigun/rotate");
   markSound("weapons/minigun/down");
   markSound("weapons/minigun/place");
   markSound("weapons/minigun/click1");
   markSound("weapons/minigun/click2");
}
override void tick() {
   if(owner && owner.player && owner.health > 0 && !isFrozen()) {
      if(owner.player.readyWeapon != self) {
         m_windUp = 0;
         return;
      }

      if(lith_isMinigunFiring()) {
         soundAlert(owner, maxDist: 256);

         if(!m_sndState) {
            if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Minigun_A)) {
               owner.A_StartSound("weapons/minigun/rotatefast", lch_weapon2, CHANF_LOOP);
            } else {
               owner.A_StartSound("weapons/minigun/rotate", lch_weapon2, CHANF_LOOP);
            }
            m_sndState = true;
         }
      } else {
         if(m_sndState) {
            owner.A_StartSound("weapons/minigun/down", lch_weapon2);
            m_sndState = false;
         }

         if(m_windUp) {
            m_windUp -= 0.015;
            m_click = true;

            if(m_windUp < 0) {
               m_windUp = 0;
               m_sndState = false;
               owner.A_StartSound("weapons/minigun/place", lch_weapon3);
            }
         }
      }
   }

   super.tick();
}

int Lith_WindupTime() {
   return 1 + int((1.0 - m_windUp) * 10.0);
}

bool lith_isMinigunFiring() {
   return !owner.player.isTotallyFrozen() && ((!Lith_UTIL.pData(_pdt_upgrade, UPGR_Minigun_A) && owner.player.buttons & BT_RELOAD) || owner.player.buttons & BT_ATTACK);
}

bool lith_isMinigunHeld() {
   return !owner.player.isTotallyFrozen() && owner.player.buttons & BT_ATTACK;
}

action(Weapon) state Lith_A_MinigunReady(statelabel lb, statelabel l) {
   int flags = WRF_NOPRIMARY;

   if(!(invoker.m_windUp ~== 0)) flags |= WRF_NOSECONDARY;

   invoker.m_lastState = lb;

   A_SetTics(invoker.Lith_WindupTime());
   if(invoker.lith_isMinigunFiring()) {
      if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Minigun_A)) {
         invoker.m_windUp += 0.21;
      } else {
         invoker.m_windUp += 0.097;
      }
      if(invoker.m_windUp > 1) invoker.m_windUp = 1;
      invoker.m_click = false;
   }

   state st = Lith_A_Ready(flags);
   if(st) return st;

   if(invoker.lith_isMinigunHeld()) {
      if(!invoker.lith_noAmmo()) {
         return ResolveState(l);
      } else {
         A_StartSound("weapons/minigun/empty", lch_dryweapon);
         A_OverlayOffset(_psp_weapon, FRandom(2, 3), FRandom(32, 34), WOF_INTERPOLATE);
         return null;
      }
   } else {
      return null;
   }
}

action(Weapon) state Lith_A_MinigunPostReady(statelabel l) {
   return invoker.m_windUp ? ResolveState(l) : null;
}

action(Weapon) void Lith_A_MinigunFire() {
   bool fast = Lith_UTIL.pData(_pdt_upgrade, UPGR_Minigun_A);
   if(fast && invoker.m_windUp != 1) {
      A_SetTics(0);
      return;
   }
   if(fast || invoker.m_ammoState++ == 1) {
      lith_takeAmmo(1);
      invoker.m_ammoState = 0;
   }
   SoundAlert(Invoker.Owner);
   A_StartSound("weapons/minigun/fire", lch_weapon, pitch: max(invoker.m_windUp, 0.8));
   A_OverlayOffset(_psp_weapon, FRandom(3, 8), FRandom(34, 39), WOF_INTERPOLATE);
   lith_gunFlash();
   soundAlert(invoker.owner);
   A_FireProjectile("Lith_LightProjectileRedShort", 0);
   Lith_A_GunSmokeSmall(1.9);
   int firemax = fast ? 4           : 2;
   int casemax = fast ? random(0,1) : 2;
   for(int i = 0; i < firemax; ++i) {
      Lith_FireBullets(8, 4, -1, 7, fbf_norandom, tracerX: 1);
   }
   for(int i = 0; i < casemax; ++i) {
      Lith_A_Casing("Lith_CasBigHot", 9, 7, 20, frandom(3,5), frandom(1,5), frandom(10,12));
   }
   Lith_A_RecoilUp(0.15);
   A_Recoil(0.07);
}

action(Weapon) void Lith_A_MinigunPostFire() {
   Lith_A_RecoilDn(0.35);
   if(Lith_UTIL.pData(_pdt_upgrade, UPGR_Minigun_A) && invoker.m_windUp == 1) {
      A_SetTics(0);
   } else {
      A_SetTics(invoker.Lith_WindupTime());
   }
}

states(Weapon) {
Ready:
   MNGG A 1 Lith_A_MinigunReady("Ready", "Fire");
   MNGG A 0 Lith_A_MinigunPostReady("Ready2");
   loop;
Ready2:
   MNGG B 0 {
      if(invoker.m_click) {
         A_StartSound("weapons/minigun/click1", lch_dryweapon, volume: fRandom(0.3, 0.5), pitch: fRandom(1.0, 1.9) * (1.0 + invoker.m_windUp));
      } else {
         A_StartSound("weapons/minigun/click2", lch_dryweapon, volume: fRandom(0.3, 0.5), pitch: fRandom(1.0, 1.4) * (1.0 + invoker.m_windUp));
      }
   }
Ready2Loop:
   MNGG B 1 Lith_A_MinigunReady("Ready2Loop", "Fire2");
   MNGG B 0 Lith_A_MinigunPostReady("Ready3");
   loop;
Ready3:
   MNGG C 1 Lith_A_MinigunReady("Ready3", "Fire3");
   MNGG C 0 Lith_A_MinigunPostReady("Ready");
   loop;

Deselect:
   #### # 0 A_StopSound(lch_weapon2);
   #### # 1 Lith_A_Lower(_raise_fast);
   loop;

Select:
   MNGG A 1 Lith_A_Raise(_raise_fast);
   loop;

Fire:
   MNGG D 1 bright Lith_A_MinigunFire;
   MNGG A 1 Lith_A_MinigunPostFire;
   goto Ready2;
Fire2:
   MNGG E 1 bright Lith_A_MinigunFire;
   MNGG B 1 Lith_A_MinigunPostFire;
   goto Ready3;
Fire3:
   MNGG F 1 bright Lith_A_MinigunFire;
   MNGG C 1 Lith_A_MinigunPostFire;
   goto ReadySelector;
}

/* EOF */
