class Lith_AirThinker : Thinker;

Actor   m_player;
vector3 m_windVec;
double  m_angle, m_speed, m_speedUnits, m_angleDest, m_speedDest, m_maxSpeed, m_speedSpeed, m_angleSpeed, m_windPitch;
int     m_timerRnd;
int     m_humidity, m_temperature;
color   m_fogColor;

static Lith_AirThinker create() {
   let th = new('Lith_AirThinker');
   th.m_maxSpeed  = Lith_UTIL.pData(_pdt_windspeed);
   th.m_player    = players[consolePlayer].mo;
   th.m_angle     =
   th.m_angleDest = fRandom[lith_wind](0, 360);
   if(th.m_player) {
      th.m_player.a_startSound("amb/wind", lch_weather1, CHANF_LOOP, 0.001, ATTN_NONE);
   }
   return th;
}

override void tick() {
   if(level.isFrozen()) {
      return;
   }
   updateEnvironment();
   updateWind();
}

void updateEnvironment() {
   let humidity    = Lith_UTIL.pData(_pdt_humidity);
   let temperature = Lith_UTIL.pData(_pdt_temperature);
   if(humidity != m_humidity || temperature != m_temperature) {
      m_fogColor = color(
         int(humidity * 2.55),
         clamp(int(temperature * 0.1375), 0, 255),
         clamp(int(abs(temperature * 0.0375)), 0, 255),
         clamp(int(temperature * -0.8375), 0, 255)
      );
      m_humidity    = humidity;
      m_temperature = temperature;
      shadeSectors();
   }
}

void updateWind() {
   m_speed      = Lith_UTIL.lerp(m_speed, m_speedDest, m_speedSpeed);
   m_angle      = Lith_UTIL.lerp(m_angle, m_angleDest, m_angleSpeed);
   m_speedUnits = (m_speed * 32.0) / 35.0;
   m_windVec    = (cos(m_angle) * m_speedUnits, sin(m_angle) * m_speedUnits, -32.0 - m_speed);
   let wx  = m_windVec.x;
   let wy  = m_windVec.y;
   let wz  = m_windVec.z;
   let wa2 = !(wx ~== 0) || !(wy ~== 0);
   let wa3 = wa2         || !(wz ~== 0);
   let wl2 = wa2 ? wx*wx + wy*wy : 0;
   let wl3 = wa3 ? wl2   + wz*wz : 0;
   let ws2 = wa2 ? sqrt(wl2) : 0;
   if(wa3 && wa2) {
      m_windPitch = atan(wz / ws2);
      if((cos(m_angle)*wx + sin(m_angle)*wy)/ws2 < 0) {
         m_windPitch *= -1;
      } else {
         m_windPitch = abs(m_windPitch);
      }
   } else {
      m_windPitch = 90;
   }
   if(level.time & m_timerRnd == 0) {
      setNextWindChange();
   }
}

void setNextWindChange() {
   let r        = fRandomPick[lith_wind](3.0, 6.0, 10.0, 20.0, 30.0, 45.0, 90.0, 180.0);
   m_speedDest  = fRandom[lith_wind](0.0, m_maxSpeed);
   m_angleDest += fRandom[lith_wind](-r, r);
   m_speedSpeed = 0.01 * fRandom[lith_wind](0.1, max(m_maxSpeed / 50.0, 0.1));
   m_angleSpeed = 0.01 * fRandom[lith_wind](0.1, max(m_maxSpeed / 50.0, 0.1));
   m_timerRnd   = randomPick[lith_wind](7, 15, 63, 255, 511);
   if(m_player) {
      m_player.a_soundVolume(lch_weather1, m_speed / 50.0);
   }
}

/* FIXME: replace this function */
void shadeSectors() {
   int fog_density = 0;
   if(m_humidity > 70) {
      fog_density = int(m_fogColor.a * 0.3921568627450980);
   }
   for(int i = 0, j = level.sectors.size(); i < j; ++i) {
      Sector sec = level.sectors[i];
      if(fog_density) {
         sec.setFogDensity(fog_density);
         sec.setFade(m_fogColor);
      }
      if(sec.getTexture(Sector.Ceiling) == skyflatnum) {
         switch(Lith_UTIL.pData(_pdt_menv)) {
         case _menv_hell:
            sec.setColor("#ff7777");
            break;
         case _menv_evil:
            sec.setColor("#ff2222");
            break;
         }
      }
   }
}

/* EOF */
