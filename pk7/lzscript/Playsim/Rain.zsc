// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Alison G. Watson. Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_RainThinker : Thinker;

enum physicsnum {
   _physnum_advanced,
   _physnum_static,
   _physnum_simple,
};

Lith_AirThinker m_air;
Actor           m_player;
class<Actor>    m_drop;
float           m_visDist;
bool            m_sound;
int             m_type;

static Lith_RainThinker create(Lith_AirThinker air) {
   let th = new('Lith_RainThinker');
   th.m_air     = air;
   th.m_player  = players[consolePlayer].mo;
   th.m_visDist = 1.0;
   th.setup(Lith_UTIL.pData(_pdt_rain));
   return th;
}

override void tick() {
   int which = Lith_UTIL.pData(_pdt_rain);
   if(which != m_type) {
      setup(which);
   }
   if(level.isFrozen() || level.time & 1 || !m_drop) {
      return;
   }
   float tgtDist;
   float curDist = spawnRain();
   if(curDist == 0.0) {
      tgtDist = 0.0;
      if(m_player) {
         m_player.takeInventory('Lith_SMGHeat', 1);
      }
   } else {
      tgtDist = clamp(curDist / 1024.0, 0.0, 1.0);
   }
   m_visDist = Lith_UTIL.lerp(m_visDist, tgtDist, 0.035);
   if(m_player && m_sound) {
      m_player.A_SoundVolume(lch_weather2, 1 - m_visDist);
   }
}

void setup(int which) {
   switch(which) {
   default:          m_sound = false; m_drop = null;                 break;
   case _rain_rain:  m_sound = true;  m_drop = 'Lith_RainDrop';      break;
   case _rain_blood: m_sound = true;  m_drop = 'Lith_BloodRainDrop'; break;
   case _rain_abyss: m_sound = true;  m_drop = 'Lith_AbyssRainDrop'; break;
   case _rain_fire:  m_sound = false; m_drop = 'Lith_Ash';           break;
   case _rain_snow:  m_sound = false; m_drop = 'Lith_SnowDrop';      break;
   }
   if(m_player) {
      if(m_sound) {
         m_player.a_startSound("amb/rain", lch_weather2, CHANF_LOOP, 0.001, ATTN_NONE);
      } else {
         m_player.a_stopSound(lch_weather2);
      }
   }
   m_type = which;
}

double spawnRain() const {
   let maxDist = m_sound ? 2048 : 512;
   let mo      = m_player;
   if(!mo) {
      mo      = players[consoleplayer].camera;
      maxDist = m_sound ? 8192 : 2048;
   }
   if(!mo || !mo.curSector) {
      return maxDist;
   }
   double  raindist = 1024;
   vector2 mpos     = mo.pos.xy;
   double  maxh     = mo.pos.z + 768;
   if(mo.curSector.getTexture(Sector.ceiling) == skyFlatNum) {
      raindist = 0;
   }
   bool    advanced;
   Sector  lastSec  = null;
   vector3 mul;
   double  zpos;
   switch(lith_sv_rainphysics) {
   default:
   case _physnum_advanced: advanced = true;  mul = (0.6,  0.6,  1.0); break;
   case _physnum_simple:   advanced = false; mul = (0.06, 0.06, 0.9); break;
   case _physnum_static:   advanced = false; mul = (0.01, 0.01, 0.7); break;
   }
   for(int i = 0, j = maxDist/30; i < j; i++) {
      let pos = mpos + (fRandom[lith_rain](-maxDist, maxDist), fRandom[lith_rain](-maxDist, maxDist));
      let sec = level.pointInSector(pos);
      if(sec && sec.getTexture(Sector.CEILING) == skyFlatNum) {
         if(sec != lastSec) {
            zpos    = min(maxh, sec.findLowestCeilingPoint());
            lastSec = sec;
         }
         let rain      = Actor.spawn(m_drop, (pos, zpos - fRandom[lith_rain](0.0, 16.0)));
         rain.angle    = m_air.m_angle     + fRandom[lith_rain](-1, 1);
         rain.pitch    = m_air.m_windPitch + fRandom[lith_rain](-1, 1);
         rain.vel      = (m_air.m_windVec.x * fRandom[lith_rain](0.95, 1.05) * mul.x, m_air.m_windVec.y * fRandom[lith_rain](0.95, 1.05) * mul.y, m_air.m_windVec.z * fRandom[lith_rain](0.95, 1.05) * mul.z);
         rain.bFlatSprite = rain.bRollSprite = advanced || !m_sound;
         rain.scale.y *= rain.vel.z / 3.0;
         if(m_sound) {
            let dist = mo.distance2d(rain);
            if(dist < raindist) {
               raindist = dist;
            }
         }
      }
   }
   return raindist;
}

/* EOF */
