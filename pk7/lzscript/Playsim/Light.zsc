// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Alison G. Watson. Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_LightThinker : Thinker;

int          m_time, m_next, m_len, m_speed, m_nextSnd;
array<int16> m_flashes;
array<int16> m_original;
array<int16> m_current;

Lith_SkyThinker m_sky;
Lith_AirThinker m_air;

static Lith_LightThinker create(Lith_SkyThinker sky, Lith_AirThinker air) {
   let th = new("Lith_LightThinker");
   th.m_sky = sky;
   th.m_air = air;
   for(int i = 0, j = level.sectors.size(); i < j; ++i) {
      th.m_flashes.push(int16.max);
      th.m_original.push(level.sectors[i].lightLevel);
      th.m_current.push(int16.max);
   }
   if(Lith_UTIL.pData(_pdt_mflg, _mflg_lightning) &&
      !(level.info.flags2 & LEVEL2_HEXENHACK || /* no-no! */
        level.info.flags & LEVEL_STARTLIGHTNING)) {
      th.setNextFlash();
   } else {
      th.m_next = int.min;
   }
   return th;
}

override void tick() {
   if(level.isFrozen()) {
      return;
   }
   updateThunder();
   updateLightning();
}

void updateThunder() {
   if(m_time == m_nextSnd) {
      S_StartSound("world/thunder", lch_weather1, 0, 1.0, ATTN_NONE, fRandom[lith_light](0.9, 1.8));
   }
}

void updateLightning() {
   let delta = -1;
   if(m_next != int.min) {
      delta = m_time++ - m_next;
   }
   int flash;
   let sky_darkening = int((lith_sv_skydarkening + 0.001) * 100);
   if(delta == 0) {
      flash = random[lith_light](200, 231);
   }
   for(int i = 0, j = level.sectors.size(); i < j; ++i) {
      Sector sec = level.sectors[i];
      let ceilTex = sec.getTexture(Sector.ceiling);
      let modified = 0;
      /* deal with darkening */
      if(ceilTex == skyFlatNum) {
         if(sky_darkening < 100) {
            modified = clamp((m_original[i] * sky_darkening) / 100, 64, 255);
            if(Lith_UTIL.pData(_pdt_menv) == _menv_evil) {
               modified = 107;
            }
         } else {
            modified = m_original[i];
         }
      }
      /* deal with flashing */
      if(delta == 0) {
         /* affect sectors with sky flat or lightning specials */
         if(ceilTex == skyFlatNum ||
            (sec.special >= 197 && sec.special <= 199)) {
            /* on first tick only, save the level and modify the light */
            int light, orig = m_current[i];
            switch(sec.special) {
            default:  light = flash;                 break;
            case 198: light = min(orig + 64, flash); break;
            case 199: light = min(orig + 32, flash); break;
            }
            /* don't effect sectors that are too bright */
            if(orig > light) {
               m_flashes[i] = int16.max;
            } else {
               modified = light;
               m_flashes[i] = orig;
            }
         }
      } else if(delta < m_len) {
         /* modify the light value as long as it's higher than the
          * original light */
         if(m_flashes[i] < m_current[i] + m_speed) {
            modified = m_current[i] + m_speed;
         }
      } else if(delta == m_len) {
         /* when done reset the flash info */
         m_flashes[i] = int16.max;
      }
      /* set light */
      if(ceilTex == skyFlatNum) {
         if(sec.lightLevel != m_current[i]) {
            m_original[i] = sec.lightLevel;
         }
         m_current[i] = modified;
         sec.setLightLevel(m_current[i]);
      }
   }
   if(delta == m_len) {
      setNextFlash();
   }
}

void setNextFlash() {
   int oldNext = m_next;
   if(random[lith_light](0, 255) < 50) {
      m_next = random[lith_light](16, 31);
   } else if(random[lith_light](0, 255) < 128 && m_time & 32 == 0) {
      m_next = random[lith_light](2, 9) * ticrate;
   } else {
      m_next = random[lith_light](5, 20) * ticrate;
   }
   if(oldNext) {
      m_nextSnd = oldNext + random[lith_light](2, min(m_next / 4, 3 * ticrate));
   } else {
      m_nextSnd = -1;
   }
   m_len   = random[lith_light]( 8, 40);
   m_speed = random[lith_light](-2, -8);
   m_next += m_time;
   m_sky.setSkyFlash(m_next, m_len);
}

/* EOF */
